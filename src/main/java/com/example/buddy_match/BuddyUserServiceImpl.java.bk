package com.example.buddy_match.controller;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.lang.reflect.Field;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.IanaLinkRelations;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import io.micrometer.common.util.StringUtils;

import com.example.buddy_match.model.BuddyUser;
import com.example.buddy_match.model.request.BuddyUserUpdateRequest;
import com.example.buddy_match.util.ValidationUtil;

import ch.qos.logback.core.util.StringUtil;
import jakarta.servlet.http.HttpServletRequest;

/**
 * This is a generated Service for demonstration purposes.
 */
@Service
public class BuddyUserServiceImpl extends BuddyUserBaseService implements BuddyUserService {
    /** This is an example repository. */
    private BuddyUserRepository repository;

    /** This is an example modelAssembler. */
    private BuddyUserModelAssembler assembler;

    public static final String USER_LOGIN_STATE = "USER_LOGIN_STATE";

    public BuddyUserServiceImpl() {
        super();
    }

    @Autowired
    public BuddyUserServiceImpl(BuddyUserRepository repository, BuddyUserModelAssembler assembler) {
        super(repository,assembler);
        this.repository = repository;
        this.assembler = assembler;
    }

    @Override
    public int userLogout(HttpServletRequest request) {
        request.getSession().removeAttribute(USER_LOGIN_STATE);
        
        return 1;
    }

    public CollectionModel<EntityModel<BuddyUser>> searchUserByTags(List<String> tagNameList) {
        if (CollectionUtils.isEmpty(tagNameList)) {
            throw new BuddyUserNotFoundException();
        }

        CustomSpecs<BuddyUser> customSpecs = new CustomSpecs<BuddyUser>();
        for (var tagName : tagNameList) {
            customSpecs = customSpecs._like("tagName", tagName);
        }

        List<EntityModel<BuddyUser>> userList = repository.findAll(customSpecs._generateSpecifications()).stream()
        .map(assembler::toModel)
        .collect(Collectors.toList());

        return CollectionModel.of(userList, linkTo(methodOn(BuddyUserController.class).all()).withSelfRel());
        
    }

    //@Override
    public String registerUser(String userName, String userPassword, String checkPassword) {
        // 验证用户名和密码是否包含特殊字符
        if (ValidationUtil.hasSpecialCharacters(userName)) {
            return "用户名不能包含特殊字符";
        }
        if (ValidationUtil.hasSpecialCharacters(userPassword)) {
            return "密码不能包含特殊字符";
        }
        CustomSpecs<BuddyUser> customSpecs = new CustomSpecs<BuddyUser>();
        customSpecs._equal("username", userName);
        // 检查用户名是否已经存在
        if (!repository.findAll(customSpecs._generateSpecifications()).isEmpty()) {
            return "用户名已存在";
        }

        // 创建并保存用户
        BuddyUser buddyUser = new BuddyUser();
        buddyUser.setUsername(userName);
        buddyUser.setPassword(userPassword); // 注意：建议实际应用中对密码进行加密存储
        
        repository.save(buddyUser);

        return "用户注册成功";
    }

    //@Override
    public BuddyUser doLogin(String userName, String userPassword, HttpServletRequest httpServletRequest) {
        if(StringUtil.isNullOrEmpty(userName)) 
            return null;

        if(userName.length() < 4)
            return null;

        if(userPassword.length() < 5)
            return null;

        if (ValidationUtil.hasSpecialCharacters(userName)) 
            return null;
        
        if (ValidationUtil.hasSpecialCharacters(userPassword)) 
            return null;

        CustomSpecs<BuddyUser> customSpecs = new CustomSpecs<BuddyUser>();
        customSpecs._equal("username", userName)._equal("password", userPassword);
        //customSpecs._like("userpassword", "123");

        Optional<BuddyUser> user = repository.findOne(customSpecs._generateSpecifications());
 
        if (user.isEmpty()) 
            return null;

        BuddyUser safetyUser = new BuddyUser();
        safetyUser.setId(user.get().getId());
        safetyUser.setUsername(user.get().getUsername());
        safetyUser.setPassword("");
        safetyUser.setCreateTime(new Date());
        safetyUser.setUpdateTime(new Date());
        safetyUser.setIsDelete((byte)0);
        safetyUser.setParentId(0L);
        safetyUser.setIsParent((byte)0);
        safetyUser.setPersonalBio(user.get().getPersonalBio());
        safetyUser.setTagName(user.get().getTagName());
        safetyUser.setUserId(user.get().getUserId());
        safetyUser.setDisplayName(user.get().getDisplayName());

        httpServletRequest.getSession().setAttribute(USER_LOGIN_STATE, safetyUser);

        return safetyUser;
    }

    public BuddyUser getCurrent(HttpServletRequest httpServletRequest) {

        Object obj = httpServletRequest.getSession().getAttribute(USER_LOGIN_STATE);
        
        // 检查类型并进行转换
        if (obj instanceof BuddyUser) {
            return (BuddyUser) obj; // 安全类型转换
        } else {
            
            return null; // 处理未找到或类型不匹配的情况
        }
    }

    public CollectionModel<EntityModel<BuddyUser>> searchUser(@RequestParam String username) {

        if(!StringUtils.isNotBlank(username)) 
            return CollectionModel.of(Collections.emptyList());

        CustomSpecs<BuddyUser> customSpecs = new CustomSpecs<BuddyUser>();
        customSpecs._like("username", username);

        List<EntityModel<BuddyUser>> testusers = repository.findAll(customSpecs._generateSpecifications()).stream().map(assembler::toModel)
        .collect(Collectors.toList()); 

        if (testusers.isEmpty())
        return CollectionModel.of(Collections.emptyList());
        
        return CollectionModel.of(testusers, linkTo(methodOn(BuddyUserController.class).all()).withSelfRel());
    }

    public ResponseEntity<?> updateBuddyUser(@RequestBody BuddyUserUpdateRequest buddyUserUpdateRequest) throws NoSuchFieldException, SecurityException {

        if(StringUtils.isEmpty(buddyUserUpdateRequest.getId().toString()))
            throw new BuddyUserNotFoundException();

        CustomSpecs<BuddyUser> customSpecs = new CustomSpecs<>();
        customSpecs._equal("id", buddyUserUpdateRequest.getId());

        Optional<BuddyUser> _findModel = repository.findOne(customSpecs._generateSpecifications());

        if(_findModel.isEmpty())
            throw new BuddyUserNotFoundException();

        BuddyUser buddyUser = _findModel.get();

        Field[] buddyUserUpdateRequestFields = BuddyUserUpdateRequest.class.getDeclaredFields();
        Field[] BuddyUserFields = BuddyUser.class.getDeclaredFields();

        try {
            for (var _field1 : buddyUserUpdateRequestFields) {
                _field1.setAccessible(true);
                //System.out.println(_field1.getName());
                if ("serialVerisonUID".equals(_field1.getName()) || "id".equals(_field1.getName())) continue;
                Field _field2 = BuddyUser.class.getDeclaredField(_field1.getName());
                //System.out.println(_field2.getName());
                _field2.setAccessible(true);
                Object fieldValue = _field1.get(buddyUserUpdateRequest);
                if (fieldValue != null && StringUtils.isNotEmpty(fieldValue.toString())) {
                    _field2.set(buddyUser, fieldValue); 
                    //System.out.println(fieldValue);
                }
            }
        } catch (IllegalAccessException | NoSuchFieldException  e) {
            e.printStackTrace(); 
        }
        
        BuddyUser _updateModel = repository.save(buddyUser);

        EntityModel<BuddyUser> entityModel = assembler.toModel(_updateModel);
        return ResponseEntity
        .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri())
        .body(entityModel);
    }
}